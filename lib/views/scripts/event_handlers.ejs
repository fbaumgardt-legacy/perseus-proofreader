<script type="text/javascript">
    var changeBtn = function(jq, text) {
        jq.group = jq.elem.closest(".btn-group").first();
        jq.toggle = jq.group.find(".dropdown-toggle").first().removeClass("btn-danger btn-warning btn-info").addClass("btn-success");
        jq.btn = jq.group.find(".alt").first().removeClass("btn-danger btn-warning btn-info").addClass("btn-success");

        json.index[jq.group.first().attr("id")].children[0].children  = [{tag:"ins",text:text,attributes:{title:"nlp 2.00"}}];
        jq.btn.text(text);
    }
    // Event handlers
    $('.dropdown-menu input').click(function(e){
        e.stopPropagation();
    }).keypress(function(e) { if (e.keyCode == 13) {
                $('.btn-group.open .dropdown-toggle').dropdown('toggle');
                changeBtn({elem: $(e.target)}, $(e.target)[0].value)
                return false;
            }});
    $('li > a').click(function (e) {
        $('.btn-group.open .dropdown-toggle').dropdown('toggle');
        changeBtn({elem: $(e.target)}, $(e.target).text())
        return false;
    });

    // Event handlers
    $('.form-control').keypress(function(e) {
        var ip = $('.modal-body .form-control')
        var validated = ip.eq(0).val().length>0 && ip.eq(1).val().length>0 && ip.eq(2).val().length>0
        if (validated) {
            $('#btn-commit').prop('disabled', false);
        } else {
            $('#btn-commit').prop('disabled', true);
        }
    });

    $('#btn-commit').click(function (e) {
        // create object from json + input fields
        var ip = $('.modal-body .form-control')
        var req = {username: ip.eq(0).val(), email: ip.eq(1).val(), msg: ip.eq(2).val(), dat: json.doc.html}
        // post object to commit url
        $.post('',req,function(data,status){
            // give feedback message
            $('.modal-body').html('<div class="jumbotron"><h1>Success</h1><p>Committed with hash '+data+'.</p></div>');
            $('.modal-footer').html('<button type="button" class="btn btn-success"><a href="/<%= work.hash %>">Back to document</a></button>')
        });
    });

    $('#keyin-field').keypress(function(e) {
        var validated = e.target.value.split(' ').length == $('.modal-body canvas').length
        if (validated) {
            $('#btn-apply').prop('disabled', false);
        } else {
            $('#btn-apply').prop('disabled', true);
        }
    });

    $('#btn-apply').click(function (e) {
        var canvasList = $('.modal-body canvas');
        var canvasKeys = Object.keys(canvasList).filter(function(k) {return k<'a'}).map(function(k) {return $(canvasList[k]).attr('word')});
        var wordList = $('#keyin-field').val().split(' ');
        for (id in canvasKeys) { changeBtn({elem:$('#'+canvasKeys[id]+' button')},wordList[id]) }
    });

    $('#btn-download').click(function(e) {
        var doc = new jsPDF('p','pt');
        var marginleft = 20, linewidth = 575, lineheight = 35;
        var x = 0, y = 20;
        $('.modal-body canvas').each(function(i,img) {
            var w = Number($(img).css('width').replace('px',''));
            var h = Number($(img).css('height').replace('px',''));
            if ((x+w)%linewidth < w) {
                x = Math.ceil(x/linewidth)*linewidth;
                y = y + lineheight;
            };
            doc.addImage(atob(img.toDataURL('image/jpeg').slice('data:image/jpeg;base64,'.length)),'JPEG',x%linewidth+marginleft,y,w,h);
            x = x+w+2;
        });
        doc.output('save');
    });

    var wordContext = function(e) {
        var res = {};
        res.text = $(e.target).closest('ul').find('input').val();
        res.line_id = $(e.target).closest('.btn-group').parent().attr('id');
        res.word_id = $(e.target).closest('.btn-group').attr('id');
        res.line = json.doc.html.children[1].children[0].children.filter(function(x) {return x.attributes.title == res.line_id})[0];
        res.word = res.line.children.filter(function(x) {return x.attributes.id == res.word_id})[0];
        res.word_idx = res.line.children.indexOf(res.word);
        return res;
    }

    var wordObject = function(id,title,text) {
        return {"tag":"span","attributes":{"id":id,"class":"ocr_word","title":title},"children":[{"tag":"span","attributes":{"class":"alternatives"},"children":[{"tag":"ins","attributes":{"class":"alt","title":"nlp 2.00"},"children":[],"text":text}]}]};
    }

    var wordButton = function(attributes, text) {
        wordBtn = $('<div class="btn-group ocr_word"><button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown"></button><ul class="dropdown-menu" role="menu"><li><div class="input-group-sm" style="margin:3px;"><input type="text" class="form-control" placeholder="Manual entry"></div></li><li><button type="button" class="btn-lmerge btn btn-default btn-sm" title="merge left"><span class="glyphicon glyphicon-backward"></span></button><button type="button" class="btn-split btn btn-default btn-sm" title="split"><span class="glyphicon glyphicon-flash"></span></button><button type="button" class="btn-delete btn btn-default btn-sm" title="delete"><span class="glyphicon glyphicon-ban-circle"></span></button><button type="button" class="btn-rmerge btn btn-default btn-sm" title="merge right"><span class="glyphicon glyphicon-forward"></span></button></li></ul></div>')
        wordBtn.find('button.btn-success').text(text);
        for (key in attributes) {if (key != "class") wordBtn.find('button.btn-success').attr(key,attributes[key])}
        wordBtn.find('.btn-lmerge').click(function(e) {frameFunc(e,mergeWord.left.fst,mergeWord.left.sec,function(){})});
        wordBtn.find('.btn-rmerge').click(function(e) {frameFunc(e,mergeWord.right.fst,mergeWord.right.sec,function(){});});
        wordBtn.find('.btn-split').click(function(e) {frameFunc(e,function(){},splitWord,function(){})});
        wordBtn.find('.btn-delete').click(deleteWord);
        wordBtn.find('input').keypress();
        return wordBtn;
    }

    var frameFunc = function(evt,fst,sec,def) {
        // build context
        var res = wordContext(evt);
        var separator = " ";
        res.evt = evt;
        res.tokens = res.text.split(separator);
        res.lneighbour = res.line.children[res.word_idx-1];
        res.rneighbour = res.line.children[res.word_idx+1];
        // test if text contains separator and run respective function
        switch (res.tokens.length) {
            case 1:
                fst(res);
                break;
            case 2:
                sec(res);
                break;
            default:
                def(res);
        }

    }

    var deleteWord = function(e) {
        // build context
        var res = wordContext(e);
        // locate and delete in json.doc
        res.line.children.splice(res.word_idx,1);
        // hide Button
        $(e.target).closest('.btn-group').css('display','none');
    }

    var splitWord = function(res) {
        // build word objects
        var leftWord = wordObject(res.word.attributes.id+"_0",res.word.attributes.title,res.tokens[0]);
        var rightWord = wordObject(res.word.attributes.id+"_1",res.word.attributes.title,res.tokens[1]);
        // position word objects
        res.line.children.splice(res.word_idx,1,leftWord,rightWord);
        json.index[leftWord.attributes.id] = leftWord;
        json.index[rightWord.attributes.id] = rightWord;

        // build word buttons
        var leftButton = wordButton(leftWord.attributes,leftWord.children[0].children[0].text);
        var rightButton = wordButton(rightWord.attributes,rightWord.children[0].children[0].text);
        // position word buttons
        $(res.evt.target).closest('.btn-group').css('display','none').before(leftButton).after(rightButton);
    }

    var mergeWord = {
        left: {
            fst: function(res) {
                if (res.lneighbour) {
                    // add text to previous word and delete word
                    var wordTxt = res.word.children[0].children[0].text
                    var neighbourBtn = $(res.evt.target).closest('.btn-group').css('display','none').prevAll(':visible:first').children('button');
                    var neighbourTxt = res.lneighbour.children[0].children[0].text + wordTxt;
                    neighbourBtn.removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(neighbourTxt);
                    res.lneighbour.children[0].children[0].text = neighbourTxt;
                    res.lneighbour.children[0].children[0].attributes.title = "nlp 2.00";
                    deleteWord(res.evt);
                }
            },
            sec: function(res) {
                if (res.lneighbour) {
                    // add text to previous word and update original word
                    $(res.evt.target).closest('.btn-group').children('button').removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(res.tokens[1]);
                    res.word.children[0].children[0].text = res.tokens[1];
                    res.word.children[0].children[0].attributes.title = "nlp 2.00"
                    var neighbourBtn = $(res.evt.target).closest('.btn-group').prevAll(':visible:first').children('button');
                    var neighbourTxt = res.lneighbour.children[0].children[0].text + res.tokens[0];
                    neighbourBtn.removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(neighbourTxt);
                    res.lneighbour.children[0].children[0].text = neighbourTxt;
                    res.lneighbour.children[0].children[0].attributes.title = "nlp 2.00";
                }
            }
        },
        right: {
            fst: function(res) {
                if (res.rneighbour) {
                    // add text to following word and delete word
                    var wordTxt = res.word.children[0].children[0].text
                    var neighbourBtn = $(res.evt.target).closest('.btn-group').css('display','none').nextAll(':visible:first').children('button');
                    var neighbourTxt = wordTxt + res.rneighbour.children[0].children[0].text;
                    neighbourBtn.removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(neighbourTxt);
                    res.rneighbour.children[0].children[0].text = neighbourTxt;
                    res.rneighbour.children[0].children[0].attributes.title = "nlp 2.00";
                    deleteWord(res.evt);
                }
            },
            sec: function(res) {
                if (res.rneighbour) {
                    // add text to following word and update original word
                    $(res.evt.target).closest('.btn-group').children('button').removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(res.tokens[0]);
                    res.word.children[0].children[0].text = res.tokens[0];
                    res.word.children[0].children[0].attributes.title = "nlp 2.00"
                    var neighbourBtn = $(res.evt.target).closest('.btn-group').nextAll(':visible:first').children('button');
                    var neighbourTxt = res.tokens[1] + res.rneighbour.children[0].children[0].text;
                    neighbourBtn.removeClass('btn-default btn-info btn-warning btn-danger btn-success').addClass('btn-success').text(neighbourTxt);
                    res.rneighbour.children[0].children[0].text = neighbourTxt;
                    res.rneighbour.children[0].children[0].attributes.title = "nlp 2.00";
                }
            }
        }
    };

    $('.btn-lmerge').click(function(e) {frameFunc(e,mergeWord.left.fst,mergeWord.left.sec,function(){})});
    $('.btn-rmerge').click(function(e) {frameFunc(e,mergeWord.right.fst,mergeWord.right.sec,function(){});});
    $('.btn-split').click(function(e) {frameFunc(e,function(){},splitWord,function(){})});
    $('.btn-delete').click(deleteWord);

</script>